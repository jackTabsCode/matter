"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[399],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>f});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),s=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=s(e.components);return r.createElement(l.Provider,{value:n},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),m=s(t),d=o,f=m["".concat(l,".").concat(d)]||m[d]||u[d]||a;return t?r.createElement(f,i(i({ref:n},p),{},{components:t})):r.createElement(f,i({ref:n},p))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=d;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c[m]="string"==typeof e?e:o,i[1]=c;for(var s=2;s<a;s++)i[s]=t[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},29318:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>c,toc:()=>s});var r=t(87462),o=(t(67294),t(3905));const a={sidebar_position:4},i="Using CollectionService tags",c={unversionedId:"Guides/CollectionService",id:"Guides/CollectionService",title:"Using CollectionService tags",description:"As a pure ECS first and foremost, Matter provides no special functionality for CollectionService tags out of the box. However, it's rather simple to implement this yourself. Here's an example taken from the official Matter example game.",source:"@site/docs/Guides/CollectionService.md",sourceDirName:"Guides",slug:"/Guides/CollectionService",permalink:"/matter/docs/Guides/CollectionService",draft:!1,editUrl:"https://github.com/jackTabsCode/matter/edit/main/docs/Guides/CollectionService.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"defaultSidebar",previous:{title:"State Machines",permalink:"/matter/docs/BestPractices/StateMachines"},next:{title:"Common Mistakes",permalink:"/matter/docs/Guides/CommonMistakes"}},l={},s=[],p={toc:s},m="wrapper";function u(e){let{components:n,...t}=e;return(0,o.kt)(m,(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"using-collectionservice-tags"},"Using CollectionService tags"),(0,o.kt)("p",null,"As a pure ECS first and foremost, Matter provides no special functionality for CollectionService tags out of the box. However, it's rather simple to implement this yourself. Here's an example taken from the official ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/evaera/matter/tree/main/example/server"},"Matter example game"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},'local CollectionService = game:GetService("CollectionService")\nlocal ReplicatedStorage = game:GetService("ReplicatedStorage")\nlocal Components = require(ReplicatedStorage.Game.components)\n\nlocal boundTags = {\n    Spinner = Components.Spinner,\n}\n\nlocal function setupTags(world)\n    local function spawnBound(instance, component)\n        local id = world:spawn(\n            component(),\n            Components.Model({\n                model = instance,\n            }),\n            Components.Transform({\n                cframe = instance.PrimaryPart.CFrame,\n            })\n        )\n\n        instance:SetAttribute("entityId", id)\n    end\n\n    for tagName, component in pairs(boundTags) do\n        for _, instance in ipairs(CollectionService:GetTagged(tagName)) do\n            spawnBound(instance, component)\n        end\n\n        CollectionService:GetInstanceAddedSignal(tagName):Connect(function(instance)\n            spawnBound(instance, component)\n        end)\n\n        CollectionService:GetInstanceRemovedSignal(tagName):Connect(function(instance)\n            local id = instance:GetAttribute("entityId")\n            if id then\n                world:despawn(id)\n            end\n        end)\n    end\nend\n\nreturn setupTags\n\n')),(0,o.kt)("p",null,"This example can be modified to meet your game's needs as you see fit."))}u.isMDXComponent=!0}}]);
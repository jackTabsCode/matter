"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[63],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),d=a,h=u["".concat(s,".").concat(d)]||u[d]||m[d]||o;return n?r.createElement(h,i(i({ref:t},c),{},{components:n})):r.createElement(h,i({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},47282:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const o={sidebar_position:4},i="Getting Started",l={unversionedId:"GettingStarted",id:"GettingStarted",title:"Getting Started",description:"We highly recommend checking out the source code of our example game to see what this all looks like when set up in a real game. Clone the repo, build the project, open it up in your favorite editor and get some first hand experience. There's no better way to learn!",source:"@site/docs/GettingStarted.md",sourceDirName:".",slug:"/GettingStarted",permalink:"/matter/docs/GettingStarted",draft:!1,editUrl:"https://github.com/jackTabsCode/matter/edit/main/docs/GettingStarted.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"defaultSidebar",previous:{title:"Installation",permalink:"/matter/docs/Installation"},next:{title:"Why ECS",permalink:"/matter/docs/WhyECS"}},s={},p=[{value:"Scaffolding a new project",id:"scaffolding-a-new-project",level:2},{value:"Next steps",id:"next-steps",level:2}],c={toc:p},u="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"getting-started"},"Getting Started"),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"We ",(0,a.kt)("strong",{parentName:"p"},"highly recommend")," checking out the source code of our example game to see what this all looks like when set up in a real game. Clone the repo, build the project, open it up in your favorite editor and get some first hand experience. There's no better way to learn!"),(0,a.kt)("p",{parentName:"admonition"},"See the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/evaera/matter/tree/main/example/"},(0,a.kt)("inlineCode",{parentName:"a"},"/example")," directory in the matter repo"),".")),(0,a.kt)("h2",{id:"scaffolding-a-new-project"},"Scaffolding a new project"),(0,a.kt)("p",null,"Here's how you scaffold a project with Matter."),(0,a.kt)("p",null,"First, import Matter at the top of your file. Then, create your ",(0,a.kt)("a",{parentName:"p",href:"/api/World"},(0,a.kt)("inlineCode",{parentName:"a"},"World"))," and your ",(0,a.kt)("a",{parentName:"p",href:"/api/Loop"},(0,a.kt)("inlineCode",{parentName:"a"},"Loop")),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="init.server.lua"',title:'"init.server.lua"'},"local Matter = require(ReplicatedStorage.Matter)\n\nlocal world = Matter.World.new()\n\nlocal loop = Matter.Loop.new(world) -- This makes Loop pass the world to all your systems.\n")),(0,a.kt)("p",null,"Then, we should collect all of your systems and schedule them. Assuming they're in a ",(0,a.kt)("inlineCode",{parentName:"p"},"systems")," folder inside this script:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="init.server.lua"',title:'"init.server.lua"'},'local systems = {}\nfor _, child in ipairs(script.systems:GetChildren()) do\n    if child:IsA("ModuleScript") then\n        table.insert(systems, require(child))\n    end\nend\n\nloop:scheduleSystems(systems)\n')),(0,a.kt)("p",null,"Then, simply start the loop."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="init.server.lua"',title:'"init.server.lua"'},"loop:begin({\n    default = RunService.Heartbeat\n})\n")),(0,a.kt)("p",null,"Now your systems would run every heartbeat, if you had any. Let's make some."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="systems/myFirstSystem.lua"',title:'"systems/myFirstSystem.lua"'},'local function myFirstSystem()\n    print("Hello world!")\nend\n\nreturn myFirstSystem\n')),(0,a.kt)("p",null,"Now we're printing something 60 times per second. We should probably do something actually interesting instead."),(0,a.kt)("p",null,"Let's create a couple components."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="components.lua"',title:'"components.lua"'},"local Matter = require(ReplicatedStorage.Matter)\n\nreturn {\n    Health = Matter.component(),\n    Poison = Matter.component(),\n}\n")),(0,a.kt)("p",null,"Let's make a system that removes 0.1 health every frame from things that are poisoned."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="systems/poisonHurts.lua"',title:'"systems/poisonHurts.lua"'},"local Components = require(script.Parent.components)\nlocal Health = Components.Health\nlocal Poison = Components.Poison\n\nlocal function poisonHurts(world)\n    for id, health in world:query(Health, Poison) do\n        world:insert(id, health:patch({\n            value = health.value - 0.1\n        }))\n    end\nend\n")),(0,a.kt)("p",null,"We make use of the ",(0,a.kt)("a",{parentName:"p",href:"/api/Component#patch"},(0,a.kt)("inlineCode",{parentName:"a"},"Component:patch"))," function, which returns a new component with an updated\nvalue, so we don't have to mutate the existing component."),(0,a.kt)("h2",{id:"next-steps"},"Next steps"),(0,a.kt)("p",null,"You should dive in to the ",(0,a.kt)("a",{parentName:"p",href:"/api/Matter"},"API reference"),"! The Matter API is simple and documented in detail."),(0,a.kt)("p",null,"And if you haven't already, check out the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/evaera/matter/tree/main/example/"},(0,a.kt)("inlineCode",{parentName:"a"},"/example")," directory in the matter repo"),"."))}m.isMDXComponent=!0}}]);
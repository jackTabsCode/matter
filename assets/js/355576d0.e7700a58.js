"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[793],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>g});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=o.createContext({}),u=function(e){var t=o.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=u(e.components);return o.createElement(i.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},p=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=u(n),p=r,g=c["".concat(i,".").concat(p)]||c[p]||m[p]||a;return n?o.createElement(g,l(l({ref:t},d),{},{components:n})):o.createElement(g,l({ref:t},d))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,l=new Array(a);l[0]=p;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[c]="string"==typeof e?e:r,l[1]=s;for(var u=2;u<a;u++)l[u]=n[u];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}p.displayName="MDXCreateElement"},11198:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>u});var o=n(87462),r=(n(67294),n(3905));const a={},l="Hot reloading",s={unversionedId:"Guides/HotReloading",id:"Guides/HotReloading",title:"Hot reloading",description:"Hot reloading allows you to see the results of new code in your game without needing to stop and start the game. Matter supports hot reloading systems. Whenever you make a change to any of your systems, you can see the results in real time in the game.",source:"@site/docs/Guides/HotReloading.md",sourceDirName:"Guides",slug:"/Guides/HotReloading",permalink:"/matter/docs/Guides/HotReloading",draft:!1,editUrl:"https://github.com/jackTabsCode/matter/edit/main/docs/Guides/HotReloading.md",tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Common Mistakes",permalink:"/matter/docs/Guides/CommonMistakes"},next:{title:"Matter Debugger",permalink:"/matter/docs/Guides/MatterDebugger"}},i={},u=[{value:"Setting up hot reloading in your game",id:"setting-up-hot-reloading-in-your-game",level:2},{value:"Installing rewire",id:"installing-rewire",level:3},{value:"Set up Rewire",id:"set-up-rewire",level:3}],d={toc:u},c="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"hot-reloading"},"Hot reloading"),(0,r.kt)("p",null,"Hot reloading allows you to see the results of new code in your game without needing to stop and start the game. Matter supports hot reloading systems. Whenever you make a change to any of your systems, you can see the results in real time in the game."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Demo of hot reloading and the ",(0,r.kt)("a",{parentName:"p",href:"/docs/Guides/MatterDebugger"},"Matter debugger")),(0,r.kt)("video",{controls:!0,width:"800"},(0,r.kt)("source",{src:"https://i.eryn.io/2227/9BmdqOYM.mp4",type:"video/mp4"}))),(0,r.kt)("h2",{id:"setting-up-hot-reloading-in-your-game"},"Setting up hot reloading in your game"),(0,r.kt)("h3",{id:"installing-rewire"},"Installing rewire"),(0,r.kt)("p",null,"We recommend using the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/sayhisam1/Rewire"},"rewire")," library for easy hot reloading."),(0,r.kt)("p",null,"You can install Rewire using ",(0,r.kt)("a",{parentName:"p",href:"https://wally.run"},"Wally"),", the Roblox open source package manager."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-toml",metastring:'title="wally.toml"',title:'"wally.toml"'},'[dependencies]\nrewire = "sayhisam1/rewire@0.3.0"\n')),(0,r.kt)("h3",{id:"set-up-rewire"},"Set up Rewire"),(0,r.kt)("p",null,"In the code where you create your Matter ",(0,r.kt)("inlineCode",{parentName:"p"},"Loop")," object, create a new ",(0,r.kt)("inlineCode",{parentName:"p"},"HotReloader")," object:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'local ReplicatedStorage = game:GetService("ReplicatedStorage")\nlocal Packages = ReplicatedStorage.Packages\nlocal HotReloader = require(Packages.rewire).HotReloader\n\nlocal hotReloader = HotReloader.new()\n')),(0,r.kt)("p",null,"Then, we call ",(0,r.kt)("inlineCode",{parentName:"p"},"HotReloader:scan"),", passing in the folder that contains your systems, and two functions: one that runs when a system is loaded, and another that runs when a system is unloaded."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"local firstRunSystems = {}\nlocal systemsByModule = {}\n\nhotReloader:scan(container, function(module, context)\n    -- The module HotReloader gives us can be a clone of the original module if it's been hot reloaded.\n\n    local originalModule = context.originalModule\n\n    -- Load the cloned module. If it has syntax errors, require will error.\n    local ok, system = pcall(require, module)\n\n    if not ok then\n        warn(\"Error when hot-reloading system\", module.name, system)\n        return\n    end\n\n\n    if firstRunSystems then\n        -- On the first run, we want to schedule all systems in one call,\n        -- so we buffer them up and call one big `loop:scheduleSystems` at the end.\n\n        table.insert(firstRunSystems, system)\n    elseif systemsByModule[originalModule] then\n        -- If this system was already loaded once before, we tell the loop to replace it.\n        loop:replaceSystem(systemsByModule[originalModule], system)\n\n        -- If you're also using the Matter debugger, tell the debugger the system was reloaded.\n        -- debugger:replaceSystem(systemsByModule[originalModule], system)\n    else\n        -- If this is a new system (i.e., a new module was created during a hot reload), just schedule it.\n        loop:scheduleSystem(system)\n    end\n\n    -- Keep a reference to the system, keyed by the original module, so we can detect if the system already existed\n    -- or not\n    systemsByModule[originalModule] = system\nend, function(_, context)\n    -- This function runs when a system is being unloaded.\n    -- context.isReloading is true if the system is about to be hot reloaded. Otherwise, it's been removed.\n    -- If it's being hot reloaded, do nothing\n    if context.isReloading then\n        return\n    end\n    -- The system is being removed\n\n    local originalModule = context.originalModule\n    if systemsByModule[originalModule] then\n        -- If the system was loaded, remove it from the loop\n        loop:evictSystem(systemsByModule[originalModule])\n        systemsByModule[originalModule] = nil\n    end\nend)\n")),(0,r.kt)("p",null,"That's it! For a real example of this in action, check out the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/evaera/matter/blob/main/example/src/shared/start.lua"},"Matter example game"),"."))}m.isMDXComponent=!0}}]);